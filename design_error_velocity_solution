// testcode.cpp : 定义控制台应用程序的入口点。
//

// velocity_solution.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <opencv2/opencv.hpp>
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <vector>
#include <math.h>
#include<fstream>
#include<string>
//#include "camera calibration.h"?????????????????????????
class camera_velocity
{
public:
     void Features_Track(const cv::Mat& prev_test_frame);
	 void Optical_LK(const cv::Mat & prev_track_frame,const cv::Mat & track_frame);
	void  sunpoint_velocity(const camera_velocity& light_point3);
	void enter_camera_calibration(const int & fate_num);
    void camera_velocity::calculation_camera_velocity(const int& ff_num);
	void camera_position(const int& p_num);
	void  line_circle(const camera_velocity& light_point4);
public:
    cv::Mat Ix;
	cv::Mat Iy;
	cv::Mat It;
    cv::Mat sum_Ix2;
	cv::Mat sum_Iy2;
	cv::Mat sum_IxIy;
    cv::Mat sum_IxIt;
	cv::Mat sum_IyIt;
	cv::Mat prev_frame;
	cv::Mat frame;
	cv::Mat frame_grey;
	cv::Mat prev_frame_grey;
	cv::Mat frame_double;
    cv::VideoCapture capture;
	std::vector<cv::Point2f> features;
	std::vector<cv::Point2f> points[2];
	std::vector<uchar>status;
	std::vector<float>err;
	std::vector<cv::Point3f> world_points;
	std::vector<cv::Mat>  camera_inner_Matrix;
	std::vector< double >tevcs_a;
    std::vector<double >tevcs_b;
    std::vector< double> revcs_t;
	std::vector<double> parameter;
	//double tevcs_a=0;
	//double tevcs_b=0;
	//double revcs_t=0;
	double camera_position_x;
	double camera_position_y;
	double camera_position_r;

    //char buf_img[32];
	char buf_point[32];
	//std::string s_img;
	std::string s_point;
}
void camera_velocity::Features_Track(const cv::Mat& prev_test_frame)
{
      goodFeaturesToTrack(prev_test_frame,features,500,0.01,10);
	  	   if(points[0].size()<=100)
	   {
		   points[0].insert(points[0].end(),features.begin(),features.end());
	   }
}
/*-----------------------------特征点的跟踪-----------------------------------------------------------------------------*/
void camera_velocity::Optical_LK(const cv::Mat& prev_track_frame,const cv::Mat& track_frame)
{
       calcOpticalFlowPyrLK(prev_track_frame,track_frame,points[0],points[1],status,err);
       int k=0;
       for(int i=0;i<points[1].size();i++)
	   {
		   if(status[i]&&(abs(points[0][i].x-points[1][i].x))+(abs(points[0][i].y-points[1][i].y))>1)
		   {
			   points[0][k]=points[0][i];
			   points[1][k++]=points[1][i];	
		   }
	    }
	   points[0].resize(k);
	   points[1].resize(k);
}
/*----------------------------求解像素点的速度------------------------------------------------------*/
void camera_velocity::sunpoint_velocity(const camera_velocity& light_point3)
{     
      /*------------------------------计算x梯度----------*/
      cv::Mat kernal_x =cv::Mat::zeros(3,3,CV_64FC1);
	  kernal_x.at<double>(1,0)=-1.0;//cv::Mat mask=(cv::Mat_<double>(4,4)
	  kernal_x.at<double>(1,2)=1.0;
	  filter2D(light_point3.prev_frame,Ix,-1,kernal_x);
	  cv::Mat kernal_y=cv::Mat::zeros(3,3,CV_64FC1);
	  /*------------------------------计算y梯度---------*/
      kernal_y.at<double>(0,1)=-1.0;
	  kernal_y.at<double>(2,1)=1.0;
	  filter2D(light_point3.prev_frame,Iy,-1,kernal_y);
	  cv::Mat kernal_sum=cv::Mat::ones(3,3,CV_64FC1);
	  //filter2D函数的意义在于卷积
	  /*------------------------计算两帧灰度变化------*/
      It=frame_double-prev_frame;
      /*--------------------------计算邻域内的和----------------*/
      cv::Mat Ix2=Ix.mul(Ix);
      cv::Mat Iy2=Iy.mul(Iy);
	  cv::Mat IxIy=Ix.mul(Iy);
	  cv::Mat IxIt=Ix.mul(It);
	  cv::Mat IyIt=Iy.mul(It);
	  filter2D(Ix2,sum_Ix2,-1,kernal_sum);
	  filter2D(Iy2,sum_Iy2,-1,kernal_sum);
	  filter2D(IxIy,sum_IxIy,-1,kernal_sum);
      filter2D(IxIt,sum_IxIt,-1,kernal_sum);
	  filter2D(IyIt,sum_IyIt,-1,kernal_sum);
	  cv::Mat det=sum_Ix2.mul(sum_Iy2)-(sum_IxIy).mul(sum_IxIy);
      /*----------------------------求解像素点的速度---------*/
      cv::Mat u=cv::Mat::zeros(light_point3.frame.rows,light_point3.frame.cols,CV_64FC1);//在数学里读取的4行2列的元素，而不是横着数4个，竖着数2个的位置
	  cv::Mat v=cv::Mat::zeros(light_point3.frame.rows,light_point3.frame.cols,CV_64FC1);
	  u=sum_IyIt.mul(sum_IxIy)-sum_IxIt.mul(sum_Iy2);
	  divide(u,det,u);
	  v=sum_IxIy.mul(sum_IyIt)-sum_Iy2.mul(sum_IxIt);
	  divide(v,det,v);
}
 /*-------------------------------进入相机标定函数----------------------------------------------------*/
void camera_velocity::enter_camera_calibration(const int & fate_num)//每个函数的输入和输出的选择，其他作为中间变量
{
        if(fate_num==1)
	  {
		 camera_inner_Matrix= camera_calibration();
		 for(int i=0;i<camera_inner_Matrix.size();i++)
	    {
	     std::cout<<camera_inner_Matrix[i]<<std::endl;
	    }
      }
	
	  double k1=(camera_inner_Matrix[1]).at<double>(0,0);
	  double dx=0.48,dy=0.48;
	  double f=(camera_inner_Matrix[0]).at<double>(0,0)*dx;
	  double u0=(camera_inner_Matrix[0]).at<double>(0,2);
	  double v0=(camera_inner_Matrix[0]).at<double>(1,2);
	  double Zc=100;//以mm和s作为单位
	  double t=0.033;
	  parameter.push_back(k1);//0
	  parameter.push_back(dx);//1
	  parameter.push_back(dy);//2
	  parameter.push_back(f);//3
	  parameter.push_back(u0);//4
	  parameter.push_back(v0);//5
	  parameter.push_back(Zc);//6
	  parameter.push_back(t);//7

}
/*-------------------------------输出相机速度--------------------------------------------*/
void camera_velocity::calculation_camera_velocity(const int& ff_num)//返回值的设计为void，输入来自于主函数，在类的层面进行操作
{
     cv::Mat outer_Matrix=cv::Mat::zeros(2,3,CV_64FC1);
     double sum_x=0;
     double sum_x2=0;
     double sum_y=0;
     double sum_y2=0;
     double sum_xy=0;
     double sum_ux=0;
     double sum_uy=0;
     double sum_vx=0;
     double sum_vy=0;
     double sum_u=0;
     double sum_v=0;
     int n=points[0].size();
	 for(int world_i=0;world_i<points[0].size();world_i++)//???????????????????????
	 {   
		

		 cv:: Point3f true_point;
	   true_point.x=parameter[6]*(points[0][world_i].x-parameter[4])*parameter[1]/parameter[3];
		true_point.y=parameter[6]*(points[0][world_i].y-parameter[5])*parameter[2]/parameter[3];
		true_point.z=parameter[6];
		world_points.push_back(true_point);
     }
	 int r=0;//r代表不越界的点的个数
     for(int i=0;i<n;i++)//越界问题解决
     {   

		 if( (1<points[1][i].x)  && (points[1][i].x<628) &&(1<points[1][i].y)  &&  (points[1][i].y<462)    )//保证u数组不越界,1<x<10相当于(1<x) <10
         {   
			 r++;
			 sum_x+=world_points[i].x;
	         sum_x2+=world_points[i].x*world_points[i].x;
	         sum_y+=world_points[i].y;
 	         sum_y2+=world_points[i].y*world_points[i].y;
 	         sum_xy+=world_points[i].x*world_points[i].y;
	         sum_ux+=(points[1][i].x-parameter[4])*world_points[i].x;//由double类型被迫转换为int类型，精度损失,此处的u不是指向速度的
	         sum_uy+=(points[1][i].x-parameter[4])*world_points[i].y;
 	         sum_vx+=(points[1][i].y-parameter[5])*world_points[i].x;
	         sum_vy+=((points[1][i].y-parameter[5]))*world_points[i].y;
	         sum_u+=(points[1][i].x-parameter[4]);
	         sum_v+=(points[1][i].y-parameter[5]);
		 }
		 
	 }
	 double det_A=(sum_x2*(sum_y2*n-sum_y*sum_y))-(sum_xy*(sum_xy*n-sum_x*sum_y))+(sum_x*(sum_xy*sum_y-sum_y2*sum_x));
	 //std::cout<<sum_x<<" "<<sum_x2<<" "<<sum_y<<" "<<sum_y2<<" "<<sum_xy<<" "<<sum_ux<<" "<<sum_uy<<" "<<sum_vx<<" "<<sum_vy<<" "<<sum_u<<" "<<sum_v<<" "<<n<<std::endl;
     outer_Matrix.at<double>(0,0)=(sum_ux*(sum_y2*n-sum_y*sum_y)+sum_uy*(-(sum_xy*n-sum_x*sum_y))+sum_u*(sum_xy*sum_y-sum_y2*sum_x))/det_A;
     //outer_Matrix.at<double>(0,1)=sum_ux*(-(sum_xy*n-sum_x*sum_y))+sum_uy*(sum_x2*n-sum_x*sum_y)+sum_u*(-(sum_x2*sum_y-sum_xy*sum_x));
     outer_Matrix.at<double>(0,2)=(sum_ux*(sum_xy*sum_y-sum_y2*sum_x)+sum_uy*(-(sum_x2*sum_y-sum_xy*sum_x))+sum_u*(sum_x2*sum_y2-sum_xy*sum_xy))/det_A;
     //outer_Matrix.at<double>(1,0)=sum_vx*(sum_y2*n-sum_y*sum_y)+sum_vy*(-(sum_xy*n-sum_x*sum_y))+sum_v*(sum_xy*sum_y-sum_y2*sum_x);
     //outer_Matrix.at<double>(1,1)=sum_vx*(-(sum_xy*n-sum_x*sum_y))+sum_vy*(sum_x2*n-sum_x*sum_y)+sum_v*(-(sum_x2*sum_y-sum_xy*sum_x));
     outer_Matrix.at<double>(1,2)=(sum_vx*(sum_xy*sum_y-sum_y2*sum_x)+sum_vy*(-(sum_x2*sum_y-sum_xy*sum_x))+sum_v*(sum_x2*sum_y2-sum_xy*sum_xy))/det_A;
	
	 //std::cout<<outer_Matrix<<std::endl;

	 tevcs_a.push_back(-outer_Matrix.at<double>(0,2)*parameter[6]*parameter[1]/parameter[3]);
     tevcs_b.push_back(-outer_Matrix.at<double>(1,2)*parameter[6]*parameter[2]/parameter[3]);
     revcs_t.push_back(acos(outer_Matrix.at<double>(0,0)*parameter[6]*parameter[1]/parameter[3]));
	 std::cout<<outer_Matrix.at<double>(0,0)<<std::endl;
	 std::cout<<outer_Matrix.at<double>(0,0)*parameter[6]*parameter[1]/parameter[3]<<std::endl;
     //tevcs_line.push_back((tevcs_a,tevcs_b));如何把点存到vector中
     //revcs_angle.push_back(revcs_t);
	 //std::cout<<r<<std::endl;
     std::cout<<"相机的横向移动速度"<<tevcs_a[ff_num-1]/parameter[7]<<"mm/s"<<std::endl;
     std::cout<<"相机的纵向移动速度"<<tevcs_b[ff_num-1]/parameter[7]<<"mm/s"<<std::endl;
     //std::cout<<"相机的移动角度"<<revcs_t[fps-1]<<"dre"<<std::endl; 相机的移动角度应该cos值应该在1左右？？？？？？？？？？？
}
/*--------------------------输出相机的姿态---------------------------------------------------------------------------------*/
void camera_velocity::camera_position(const int& p_num)
{
    if(p_num>=38)//只要有一帧是空帧，结果就无法显示？？？？？？？？？？？？？？？？？
	 {
	 camera_position_x=camera_position_x+tevcs_a[p_num-1];//有些帧没有特征点导致无法计算
	 camera_position_y=camera_position_y+tevcs_b[p_num-1];
	 camera_position_r=camera_position_r+revcs_t[p_num-1];
	 std::cout<<"相机的实时姿态"<<camera_position_x<<" "<<camera_position_y<<std::endl;
	 }
}
/*------------------------标点连线------------------------------------------------------------------------------------------------*/
void camera_velocity::line_circle(const camera_velocity& light_point4)
{
  for(int i=0;i<points[1].size();i++)
      {
			line(light_point4.frame,points[0][i],points[1][i],cv::Scalar(255,255,255));
		    circle(light_point4.frame,points[1][i],2,cv::Scalar(255,255,255),-1);
			circle(light_point4.frame,points[0][i],2,cv::Scalar(255,255,0),-1);
		    sprintf(buf_point,"%d",i);
		    s_point=buf_point;
		    putText(frame,s_point,points[1][i],CV_FONT_HERSHEY_COMPLEX, 0.2, cv::Scalar(255, 0, 0),1,8);
	  }
   swap(points[1],points[0]);//用此帧图像的点变为前一帧
}

int main(int argc, char* argv[])
{   
	camera_velocity sunpoint;
    cv::VideoCapture capture;
	capture.open("G:\\sunpoint_project_data\\videorecord\\new_video.avi");
    int fps=1;//记录帧数
	while(true)
	{
		capture.read(sunpoint.frame);
	    cvtColor(sunpoint.frame,sunpoint.frame_grey,CV_BGR2GRAY);
	    std::cout<<"第"<<fps<<"帧"<<std::endl;
	    
	    if(sunpoint.prev_frame_grey.empty())
	   {
	       sunpoint.frame_grey.copyTo(sunpoint.prev_frame_grey);
		}
       sunpoint.frame.convertTo(sunpoint.frame_double,CV_64F,1,0);//类型转化，转化为double类型,三通道,得到double类型的结果
        sunpoint.Features_Track(sunpoint.frame_grey);
		sunpoint.Optical_LK(sunpoint.prev_frame_grey,sunpoint.frame_grey);
	    if(sunpoint.prev_frame.empty())
	  {
		  sunpoint.frame_double.copyTo(sunpoint.prev_frame);
	  }
      
	   sunpoint.enter_camera_calibration(fps);
	   sunpoint.calculation_camera_velocity(fps);
	   sunpoint.camera_position(fps);
	   sunpoint.line_circle(sunpoint);
	   imshow("sun_point_img",sunpoint.frame);//imshow可显示8，16无符号，1，3通道
	  if(cv::waitKey(10)>=0)
	  {
		  std::cout<<"exit"<<std::endl;
	  }
	  cv::waitKey(1);
	   sunpoint.frame_grey.copyTo(sunpoint.prev_frame_grey);//进行循环的条件
	   sunpoint.frame_double.copyTo(sunpoint.prev_frame);
	   fps++;
   }
 return 0;
}





