// velocity_solution.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <opencv2/opencv.hpp>
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <vector>
#include <math.h>
#include<fstream>
#include<string>
#include "camera calibration.h"


int main(int argc, char* argv[])
{   
	cv::Mat Ix;
	cv::Mat Iy;
	cv::Mat It;
    cv::Mat sum_Ix2;
	cv::Mat sum_Iy2;
	cv::Mat sum_IxIy;
    cv::Mat sum_IxIt;
	cv::Mat sum_IyIt;
	cv::Mat prev_frame;
	cv::Mat frame;
	cv::Mat frame_grey;
	cv::Mat prev_frame_grey;
	cv::Mat frame_double;
    cv::VideoCapture capture;
	std::vector<cv::Point2f> features;
	std::vector<cv::Point2f> points[2];
	std::vector<uchar>status;
	std::vector<float>err;
	std::vector<cv::Point3f> world_points;
	std::vector<cv::Mat>  camera_inner_Matrix;
	std::vector< double >tevcs_a;
    std::vector<double >tevcs_b;
    std::vector< double> revcs_t;
	//double tevcs_a=0;
	//double tevcs_b=0;
	//double revcs_t=0;
	double camera_position_x=0;
	double camera_position_y=0;
	double camera_position_r=0;

    //char buf_img[32];
	char buf_point[32];
	//std::string s_img;
	std::string s_point;
	capture.open("G:\\sunpoint_project_data\\videorecord\\Rec 0012.avi");
    int fps=1;//记录帧数
	while(true)
	{
		capture.read(frame);
	    cvtColor(frame,frame_grey,CV_BGR2GRAY);
	    frame.convertTo(frame_double,CV_64F,1,0);//类型转化，转化为double类型,三通道,得到double类型的结果
	    std::cout<<"第"<<fps<<"帧"<<std::endl;
	    
	    if(prev_frame_grey.empty())
	   {
	       frame_grey.copyTo(prev_frame_grey);
		}
/*-----------------------------特征点的跟踪-----------------------------------------------------------------------------*/
	   goodFeaturesToTrack(prev_frame_grey,features,500,0.01,10);
	   if(points[0].size()<=100)
	   {
		   points[0].insert(points[0].end(),features.begin(),features.end());
	   }
       calcOpticalFlowPyrLK(prev_frame_grey,frame_grey,points[0],points[1],status,err);
       int k=0;
       for(int i=0;i<points[1].size();i++)
	   {
		   if(status[i]&&(abs(points[0][i].x-points[1][i].x))+(abs(points[0][i].y-points[1][i].y))>1)
		   {
			   points[0][k]=points[0][i];
			   points[1][k++]=points[1][i];	
		   }
	    }
	   points[0].resize(k);
	   points[1].resize(k);
	    //if(k>=10)
	   //{std::cout<<"coo"<<points[0][2].x<<points[0][2].y<<std::endl;}
      
       //	double frame_point=frame_double.at<double>(30,30);
	   // std::cout<<"frame_point"<<frame_point<<std::endl;
	  if(prev_frame.empty())
	  {
		  frame_double.copyTo(prev_frame);
	  }
/*------------------------------计算x梯度----------------------------------------------------------------------------------*/
 	  cv::Mat kernal_x =cv::Mat::zeros(3,3,CV_64FC1);
	  kernal_x.at<double>(1,0)=-1.0;//cv::Mat mask=(cv::Mat_<double>(4,4)
	  kernal_x.at<double>(1,2)=1.0;
	  filter2D(prev_frame,Ix,-1,kernal_x);
	/*------------------------------计算y梯度-----------------------------------------------------------------------------------*/
	  cv::Mat kernal_y=cv::Mat::zeros(3,3,CV_64FC1);
      kernal_y.at<double>(0,1)=-1.0;
	  kernal_y.at<double>(2,1)=1.0;
	  filter2D(prev_frame,Iy,-1,kernal_y);
	  cv::Mat kernal_sum=cv::Mat::ones(3,3,CV_64FC1);
	  //filter2D函数的意义在于卷积
/*------------------------计算两帧灰度变化--------------------------------------------------------------------------------*/
      It=frame_double-prev_frame;
	  // double It_point=It.at<double>(30,30);
	  // std::cout<<"It_point"<<It_point<<std::endl;
/*--------------------------计算邻域内的和-------------------------------------------------------------------------------*/
      cv::Mat Ix2=Ix.mul(Ix);
      cv::Mat Iy2=Iy.mul(Iy);
	  cv::Mat IxIy=Ix.mul(Iy);
	  cv::Mat IxIt=Ix.mul(It);
	  cv::Mat IyIt=Iy.mul(It);
	  filter2D(Ix2,sum_Ix2,-1,kernal_sum);
	  filter2D(Iy2,sum_Iy2,-1,kernal_sum);
	  filter2D(IxIy,sum_IxIy,-1,kernal_sum);
      filter2D(IxIt,sum_IxIt,-1,kernal_sum);
	  filter2D(IyIt,sum_IyIt,-1,kernal_sum);
	  cv::Mat det=sum_Ix2.mul(sum_Iy2)-(sum_IxIy).mul(sum_IxIy);
/*----------------------------求解像素点的速度，相机的移动速度-----------------------------------------------------------------------------*/
      cv::Mat u=cv::Mat::zeros(frame.rows,frame.cols,CV_64FC1);//在数学里读取的4行2列的元素，而不是横着数4个，竖着数2个的位置
	  cv::Mat v=cv::Mat::zeros(frame.rows,frame.cols,CV_64FC1);
	  u=sum_IyIt.mul(sum_IxIy)-sum_IxIt.mul(sum_Iy2);
	  divide(u,det,u);
	  //double u_point=u.at<double>(30,30);
	  //std::cout<<"u"<<u_point<<std::endl; //由于数据量过大，选择其中的一个点输出
	  v=sum_IxIy.mul(sum_IyIt)-sum_Iy2.mul(sum_IxIt);
	  divide(v,det,v);
/*-------------------------------进入相机标定函数-------------------------------------------------------------------------------*/
	  if(fps==1)
	  {
		 camera_inner_Matrix= camera_calibration();
		 for(int i=0;i<camera_inner_Matrix.size();i++)
	    {
	     std::cout<<camera_inner_Matrix[i]<<std::endl;
	    }
      }
	  double k1=(camera_inner_Matrix[1]).at<double>(0,0);
	  double dx=0.48,dy=0.48;
	  double f=(camera_inner_Matrix[0]).at<double>(0,0)*dx;
	  //std::cout<<f<<std::endl;
	  double u0=(camera_inner_Matrix[0]).at<double>(0,2);
	  double v0=(camera_inner_Matrix[0]).at<double>(1,2);
	  double Zc=100;//以mm和s作为单位
	  double t=0.033;
/*-----------------------------------------------------------------------求解相机速度-----------------------------------*/
  
      cv::Mat outer_Matrix=cv::Mat::zeros(2,3,CV_64FC1);
      //double u1=u.at<double>((double)points[1][i].x,(double)points[1][i].y);
      //double v1=v.at<double>((double)points[1][i].x,(double)points[1][i].y);
     double sum_x=0;
     double sum_x2=0;
     double sum_y=0;
     double sum_y2=0;
     double sum_xy=0;
     double sum_ux=0;
     double sum_uy=0;
     double sum_vx=0;
     double sum_vy=0;
     double sum_u=0;
     double sum_v=0;
     int n=points[0].size();
     //double k1=-0.112;//让它调用camera函数，测试所用的值
     //double k2=0.296;
     //double Zc=100;//假设Zc=100
     //double f=730;
	 for(int world_i=0;world_i<points[0].size();world_i++)//???????????????????????
	 {  
		 cv:: Point3f true_point;
	   true_point.x=Zc*(points[0][world_i].x-u0)*dx/f;
		true_point.y=Zc*(points[0][world_i].y-v0)*dy/f;
		true_point.z=Zc;
		world_points.push_back(true_point);
     }
     //double t=0.033;
	 int r=0;//r代表不越界的点的个数
     for(int i=0;i<n;i++)//越界问题解决
     {   

		 if( (1<points[1][i].x)  && (points[1][i].x<628) &&(1<points[1][i].y)  &&  (points[1][i].y<462)    )//保证u数组不越界,1<x<10相当于(1<x) <10
         {   
			 //if(fps==24)
			 //{
		     //std::cout<<"x"<<points[1][i].x<<"y"<<points[1][i].y<<std::endl;
			 //std::cout<<i<<".point"<<""<<(u.at<double>(((double)points[1][i].y-1),((double)points[1][i].x-1)))<<std::endl;
		     //std::cout<<i<<".point"<<""<<(v.at<double>(((double)points[1][i].y-1),((double)points[1][i].x-1)))<<std::endl;
			 //}
			 r++;
			 sum_x+=world_points[i].x;
	         sum_x2+=world_points[i].x*world_points[i].x;
	         sum_y+=world_points[i].y;
 	         sum_y2+=world_points[i].y*world_points[i].y;
 	         sum_xy+=world_points[i].x*world_points[i].y;
	         sum_ux+=(points[1][i].x-u0)*world_points[i].x;//由double类型被迫转换为int类型，精度损失,此处的u不是指向速度的
	         sum_uy+=(points[1][i].x-u0)*world_points[i].y;
 	         sum_vx+=(points[1][i].y-v0)*world_points[i].x;
	         sum_vy+=((points[1][i].y-v0))*world_points[i].y;
	         sum_u+=(points[1][i].x-u0);
	         sum_v+=(points[1][i].y-v0);
		 }
		 
	 }
	 double det_A=(sum_x2*(sum_y2*n-sum_y*sum_y))-(sum_xy*(sum_xy*n-sum_x*sum_y))+(sum_x*(sum_xy*sum_y-sum_y2*sum_x));
	 //std::cout<<sum_x<<" "<<sum_x2<<" "<<sum_y<<" "<<sum_y2<<" "<<sum_xy<<" "<<sum_ux<<" "<<sum_uy<<" "<<sum_vx<<" "<<sum_vy<<" "<<sum_u<<" "<<sum_v<<" "<<n<<std::endl;
     outer_Matrix.at<double>(0,0)=(sum_ux*(sum_y2*n-sum_y*sum_y)+sum_uy*(-(sum_xy*n-sum_x*sum_y))+sum_u*(sum_xy*sum_y-sum_y2*sum_x))/det_A;
     //outer_Matrix.at<double>(0,1)=sum_ux*(-(sum_xy*n-sum_x*sum_y))+sum_uy*(sum_x2*n-sum_x*sum_y)+sum_u*(-(sum_x2*sum_y-sum_xy*sum_x));
     outer_Matrix.at<double>(0,2)=(sum_ux*(sum_xy*sum_y-sum_y2*sum_x)+sum_uy*(-(sum_x2*sum_y-sum_xy*sum_x))+sum_u*(sum_x2*sum_y2-sum_xy*sum_xy))/det_A;
     //outer_Matrix.at<double>(1,0)=sum_vx*(sum_y2*n-sum_y*sum_y)+sum_vy*(-(sum_xy*n-sum_x*sum_y))+sum_v*(sum_xy*sum_y-sum_y2*sum_x);
     //outer_Matrix.at<double>(1,1)=sum_vx*(-(sum_xy*n-sum_x*sum_y))+sum_vy*(sum_x2*n-sum_x*sum_y)+sum_v*(-(sum_x2*sum_y-sum_xy*sum_x));
     outer_Matrix.at<double>(1,2)=(sum_vx*(sum_xy*sum_y-sum_y2*sum_x)+sum_vy*(-(sum_x2*sum_y-sum_xy*sum_x))+sum_v*(sum_x2*sum_y2-sum_xy*sum_xy))/det_A;
	
	 //std::cout<<outer_Matrix<<std::endl;

	 tevcs_a.push_back(-outer_Matrix.at<double>(0,2)*Zc*k1/f);
     tevcs_b.push_back(-outer_Matrix.at<double>(1,2)*Zc*k1/f);
     revcs_t.push_back(acos(outer_Matrix.at<double>(0,0)*Zc*k1/f));
     //tevcs_line.push_back((tevcs_a,tevcs_b));如何把点存到vector中
     //revcs_angle.push_back(revcs_t);
	 //std::cout<<r<<std::endl;
     std::cout<<"相机的横向移动速度"<<tevcs_a[fps-1]/t<<"mm/s"<<std::endl;
     std::cout<<"相机的纵向移动速度"<<tevcs_b[fps-1]/t<<"mm/s"<<std::endl;
     std::cout<<"相机的移动角度"<<revcs_t[fps-1]<<"dre"<<std::endl;
/*--------------------------输出相机的姿态---------------------------------------------------------------------------------*/
	 camera_position_x=camera_position_x+tevcs_a[fps-1];//有些帧没有特征点导致无法计算
	 camera_position_y=camera_position_y+tevcs_b[fps-1];
	 camera_position_r=camera_position_r+revcs_t[fps-1];
	// std::cout<<"相机的实时姿态"<<camera_position_x<<" "<<camera_position_y<<" "<<camera_position_r<<std::endl;
/*--------------------------输出特征点u，v-----------------------------------------------------------------------------------*/
     for(int i=0;i<points[0].size();i++)
     {  
		     //if((1<points[0][i].x)  && (points[0][i].x<628) &&(1<points[0][i].y)  &&  (points[0][i].y<462))//at函数是先行数后列数
		     //{
				 //std::cout<<"x"<<points[0][i].x<<"y"<<points[0][i].y<<std::endl;
		         //std::cout<<i<<".point"<<""<<(u.at<double>(((double)points[0][i].y-1),((double)points[0][i].x-1)))<<std::endl;
		         //std::cout<<i<<".point"<<""<<(v.at<double>(((double)points[0][i].y-1),((double)points[0][i].x-1)))<<std::endl;
		 //精度损失,double和int类型，  error,doublel类型输出整值？？？？
			 //}
	 }
	    //cv::FileStorage fs("./mat.xml",cv::FileStorage::WRITE);将文件写入xml里
         // fs<<"mat"<<u;
         // fs.release();
         //double prev_frame_point=prev_frame.at<double>(30,30);
	    //std::cout<<"prev_frame_point"<<prev_frame_point<<std::endl;
/*------------------------标点连线------------------------------------------------------------------------------------------------*/
	  for(int i=0;i<points[1].size();i++)
      {
			line(frame,points[0][i],points[1][i],cv::Scalar(255,255,255));
		    circle(frame,points[1][i],2,cv::Scalar(255,255,255),-1);
			circle(frame,points[0][i],2,cv::Scalar(255,255,0),-1);
		    sprintf(buf_point,"%d",i);
		    s_point=buf_point;
		    putText(frame,s_point,points[1][i],CV_FONT_HERSHEY_COMPLEX, 0.2, cv::Scalar(255, 0, 0),1,8);
	  }
       //sprintf(buf_img,"%d.jpg",fps);
	  //s_img=buf_img;
	  imshow("sun_point_img",frame);//imshow可显示8，16无符号，1，3通道
	  if(cv::waitKey(10)>=0)
	  {
		  std::cout<<"exit"<<std::endl;
	  }
	  //cv::destroyWindow(s); 瞬间闪退
	  cv::waitKey(1);
	   frame_grey.copyTo(prev_frame_grey);//进行循环的条件
	   swap(points[1],points[0]);//用此帧图像的点变为前一帧
	   frame_double.copyTo(prev_frame);
	   fps++;
   }
 return 0;
}
